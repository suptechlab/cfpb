// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var exec, fs, iced, path, _, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  path = require('path');

  _ = require('underscore');

  exec = require('child_process').exec;

  module.exports = function(conf) {
    var get_couchdb_url, nano_system_user, x;
    x = {};
    get_couchdb_url = function(user) {
      var out;
      out = conf.COUCHDB.HTTPS ? 'https' : 'http';
      out += '://';
      out += user + ':' + conf.COUCH_PWD + '@';
      return out += conf.COUCHDB.HOST + ':' + conf.COUCHDB.PORT;
    };
    x.nano_user = function(user) {
      return require('nano-promise')({
        url: get_couchdb_url(user)
      });
    };
    x.nano_system_user = nano_system_user = x.nano_user(conf.COUCHDB.SYSTEM_USER);
    x.create_db = function(db_name, security_doc, callback) {
      var design_docs, err, resp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "create_db"
          });
          nano_system_user.db.create(db_name, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return resp = arguments[1];
              };
            })(),
            lineno: 24
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            return typeof callback === "function" ? callback(err, resp) : void 0;
          }
          design_docs = require('../../../lib/design_docs/' + db_name.split('_')[0]);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
              funcname: "create_db"
            });
            x.sync_design_docs(db_name, design_docs, security_doc, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return resp = arguments[1];
                };
              })(),
              lineno: 28
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (err) {
              return typeof callback === "function" ? callback(err, resp) : void 0;
            }
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this));
    };
    x.ensure_db = function() {
      var args, callback, db, db_name, err, method, resp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      db = arguments[0], method = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];

      /*
      call the method against the db with the given args.
      if it doesn't exist,
      create the db and call again. return result
       */
      callback = null;
      if (_.isFunction(_.last(args))) {
        callback = args.pop();
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "ensure_db"
          });
          db[method].apply(db, args.concat([
            __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return resp = arguments[1];
                };
              })(),
              lineno: 43
            })
          ]));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if ((typeof err !== "undefined" && err !== null ? err.message : void 0) === 'no_db_file') {
            db_name = db.config.db;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
                funcname: "ensure_db"
              });
              x.create_db(db_name, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 47
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (err) {
                return typeof callback === "function" ? callback(err, resp) : void 0;
              }
              return db[method].apply(db, args.concat([callback]));
              return __iced_k();
            });
          } else {
            return typeof callback === "function" ? callback(err, resp) : void 0;
            return __iced_k();
          }
        };
      })(this));
    };
    x.force_get = function(db, doc_id, callback) {
      var doc, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);

      /*
      ensure there is a database, return an empty dict if doc doesn't exist
       */
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "force_get"
          });
          x.ensure_db(db, 'get', doc_id, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return doc = arguments[1];
              };
            })(),
            lineno: 58
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if ((typeof err !== "undefined" && err !== null ? err.status_code : void 0) === 404) {
            doc = {};
            err = null;
          }
          return callback(err, doc);
        };
      })(this));
    };
    x.update = function(db, update_data, doc_id, callback) {
      var doc, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (callback == null) {
        callback = null;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "update"
          });
          x.force_get(db, doc_id, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return doc = arguments[1];
              };
            })(),
            lineno: 65
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            return typeof callback === "function" ? callback(err, doc) : void 0;
          }
          _.extend(doc, update_data);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
              funcname: "update"
            });
            db.insert(doc, doc_id, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return doc = arguments[1];
                };
              })(),
              lineno: 69
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if ((typeof err !== "undefined" && err !== null ? err.status_code : void 0) === 409) {
              return x.update(db, update_data, doc_id, callback);
            }
            return typeof callback === "function" ? callback(err, doc) : void 0;
          });
        };
      })(this));
    };
    x.sync_all_db_design_docs = function(db_type) {
      var all_dbs, db_name, dbs, design_docs, err, errs, i, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      "does not remove deleted design docs\nupdates the design doc - does not replace\ndb_type - the type of database - updates all dbs whos names start with db_type";
      design_docs = require('../../../lib/design_docs/' + db_type);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "sync_all_db_design_docs"
          });
          nano_system_user.db.list(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return all_dbs = arguments[1];
              };
            })(),
            lineno: 81
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          dbs = _.filter(all_dbs, function(db) {
            return db.indexOf(db_type) === 0;
          });
          errs = [];
          (function(__iced_k) {
            var _i, _len;
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
              funcname: "sync_all_db_design_docs"
            });
            for (i = _i = 0, _len = dbs.length; _i < _len; i = ++_i) {
              db_name = dbs[i];
              x.sync_design_docs(db_name, design_docs, __iced_deferrals.defer({
                assign_fn: (function(__slot_1, __slot_2) {
                  return function() {
                    return __slot_1[__slot_2] = arguments[0];
                  };
                })(errs, i),
                lineno: 86
              }));
            }
            __iced_deferrals._fulfill();
          })(function() {
            errs = _.compact(errs);
            if (errs.length) {
              return console.log({
                "ERROR": errs
              });
            } else {
              return console.log('completed without errors');
            }
          });
        };
      })(this));
    };
    x.sync_security_doc = function(db_name, security_doc, callback) {
      var db, err, security_data, security_doc_path, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);

      /* 
      security doc can either be a security doc hash or a design doc name string.
      if a string, the security doc will be looked up in the design doc folder.
       */
      (function(_this) {
        return (function(__iced_k) {
          if (_.isString(security_doc)) {
            security_doc_path = path.join(__dirname, '../../../lib/design_docs', security_doc, '_security');
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
                funcname: "sync_security_doc"
              });
              fs.readFile(security_doc_path, {
                encoding: 'utf8'
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return security_data = arguments[1];
                  };
                })(),
                lineno: 100
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if ((typeof err !== "undefined" && err !== null ? err.code : void 0) === 'ENOENT') {
                return callback();
              }
              if (err) {
                return callback(err);
              }
              return __iced_k(security_doc = JSON.parse(security_data));
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          db = x.nano_system_user.use(db_name);
          return x.update(db, security_doc, '_security', callback);
        };
      })(this));
    };
    x.sync_design_docs = function(db_name, design_doc_names, security_doc, callback) {
      var cmd, cp, err, errors, i, name, url, wd, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (_.isFunction(security_doc)) {
        callback = security_doc;
        security_doc = null;
      }
      security_doc = security_doc || design_doc_names[0];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "sync_design_docs"
          });
          x.sync_security_doc(db_name, security_doc, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 114
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            return callback(err);
          }
          errors = [];
          (function(__iced_k) {
            var _i, _len;
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
              funcname: "sync_design_docs"
            });
            for (i = _i = 0, _len = design_doc_names.length; _i < _len; i = ++_i) {
              name = design_doc_names[i];
              url = get_couchdb_url('admin') + '/' + db_name;
              cmd = 'kanso push ' + name + ' ' + url;
              wd = path.join(__dirname, '../../../lib/design_docs');
              cp = exec(cmd, {
                cwd: wd
              }, __iced_deferrals.defer({
                assign_fn: (function(__slot_1, __slot_2) {
                  return function() {
                    return __slot_1[__slot_2] = arguments[0];
                  };
                })(errors, i),
                lineno: 124
              }));
              cp.stdout.pipe(process.stdout);
              cp.stderr.pipe(process.stderr);
            }
            __iced_deferrals._fulfill();
          })(function() {
            errors = _.compact(errors);
            if (errors.length) {
              return callback(errors);
            } else {
              return callback();
            }
          });
        };
      })(this));
    };
    x.merge_old_and_new_docs = function(old_docs, new_docs, should_update) {
      var i, new_doc, old_doc, out, updated_doc, _i, _len;
      out = [];
      for (i = _i = 0, _len = old_docs.length; _i < _len; i = ++_i) {
        old_doc = old_docs[i];
        new_doc = new_docs[i];
        if (old_doc.doc == null) {
          out.push(new_doc);
        } else if ((should_update == null) || should_update(old_doc, new_doc)) {
          updated_doc = _.extend(old_doc.doc, new_doc);
          out.push(updated_doc);
        }
      }
      return out;
    };
    x.upsert = function(db, new_docs, should_update, callback) {
      var bulk_data, bulk_resp, conflicted, doc, err, errored, i, ids, new_doc, old_docs, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ids = _.pluck(new_docs, '_id');
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "upsert"
          });
          x.ensure_db(db, 'fetch', {
            keys: ids
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return old_docs = arguments[1];
              };
            })(),
            lineno: 148
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            return callback(err);
          }
          bulk_data = x.merge_old_and_new_docs(old_docs.rows, new_docs, should_update);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
              funcname: "upsert"
            });
            db.bulk({
              docs: bulk_data
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return bulk_resp = arguments[1];
                };
              })(),
              lineno: 152
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _i, _len;
            if (err) {
              return callback(err);
            }
            errored = [];
            conflicted = [];
            for (_i = 0, _len = bulk_resp.length; _i < _len; _i++) {
              doc = bulk_resp[_i];
              if (doc.error === 'conflict') {
                i = ids.indexOf(doc.id);
                new_doc = new_docs[i];
                conflicted.push(new_doc);
              } else if (doc.error) {
                errored.push(doc);
              }
            }
            if (errored.length) {
              return callback({
                bulk_errors: errored,
                bulk_conflicted: conflicted
              });
            } else if (conflicted.length) {
              return x.upsert(db, conflicted, should_update, callback);
            } else {
              return callback(null, bulk_resp);
            }
          });
        };
      })(this));
    };
    x.get_uuid = function(callback) {
      var err, resp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "get_uuid"
          });
          nano_system_user.request({
            db: "_uuids"
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return resp = arguments[1];
              };
            })(),
            lineno: 172
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            return callback(err, resp);
          }
          return callback(null, resp.uuids[0]);
        };
      })(this));
    };
    x.get_uuids = function(count, callback) {
      var err, resp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/pantheon-repos/pantheon-helpers/src/couch_utils.iced",
            funcname: "get_uuids"
          });
          nano_system_user.request({
            db: "_uuids",
            path: '?count=' + count
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return resp = arguments[1];
              };
            })(),
            lineno: 179
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            return callback(err, resp);
          }
          return callback(null, resp.uuids);
        };
      })(this));
    };
    x.rewrite = function(db, design_doc, user_opts, callback) {
      var nano, opts;
      if (_.isString(user_opts)) {
        user_opts = {
          path: user_opts
        };
      }
      opts = {
        db: db.config.db
      };
      _.extend(opts, user_opts);
      opts.path = '_design/' + design_doc + '/_rewrite' + opts.path;
      nano = require('nano-promise')(db.config.url);
      return nano.request(opts, callback);
    };
    return x;
  };

}).call(this);

// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var h, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  h = {};

  h.mk_objs = function(obj, path_array, val) {
    var path_part;
    if (val == null) {
      val = {};
    }

    /*
    make a set of nested object.
    
    obj = {'x': 1}
    mk_objs(obj, ['a', 'b'], ['1'])
     * returns []
     * obj now equals {'x': 1, 'a': {'b': ['1']}}
    
    return the val
     */
    if (!path_array.length) {
      return obj;
    }
    path_part = path_array.shift();
    if (!obj[path_part]) {
      if (path_array.length) {
        obj[path_part] = {};
      } else {
        obj[path_part] = val;
      }
    } else if (path_array.length && _.isArray(obj[path_part])) {
      throw new Error('item at "' + path_part + '" must be an Object, but it is an Array.');
    } else if (path_array.length && !_.isObject(obj[path_part])) {
      throw new Error('item at "' + path_part + '" must be an Object, but it is a ' + typeof obj[path_part] + '.');
    }
    return h.mk_objs(obj[path_part], path_array, val);
  };

  h.remove_in_place = function(container, value) {
    var i;
    if (__indexOf.call(container, value) >= 0) {
      i = container.indexOf(value);
      return container.splice(i, 1);
    }
  };

  h.remove_in_place_by_id = function(container, record) {

    /*
    given a record hash with an id key, look through the container array
    to find an item with the same id as record. If such an item exists,
    remove it in place.
    return the deleted record or undefined
     */
    var existing_record, i, item, _i, _len;
    for (i = _i = 0, _len = container.length; _i < _len; i = ++_i) {
      item = container[i];
      if (item.id === record.id) {
        existing_record = container.splice(i, 1)[0];
        return existing_record;
      }
    }
    return void 0;
  };

  h.insert_in_place = function(container, value) {
    if (__indexOf.call(container, value) < 0) {
      return container.push(value);
    }
  };

  h.insert_in_place_by_id = function(container, record) {

    /*
    given a record hash with an id key, add the record to the container
    if an item with the record's key is not already in the container
    return the existing or new record.
     */
    var existing_record;
    existing_record = _.findWhere(container, {
      id: record.id
    });
    if (existing_record) {
      return existing_record;
    } else {
      container.push(record);
      return record;
    }
  };

  module.exports = h;

}).call(this);

// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var actions, audit, auth, dd, h, validate, _;

  _ = require('underscore');

  h = require('./helpers');

  validate = require('./validation/index');

  actions = require('./actions');

  audit = require('pantheon-helpers').design_docs.audit;

  auth = validate.auth;

  dd = {
    views: {
      by_role: {
        map: function(doc) {
          var role_data, role_name, team_id, user_id, _ref, _results;
          auth = require('views/lib/auth');
          if (!auth._is_team(doc)) {
            return;
          }
          team_id = doc._id.slice(5);
          _ref = doc.roles;
          _results = [];
          for (role_name in _ref) {
            role_data = _ref[role_name];
            _results.push((function() {
              var _i, _len, _ref1, _results1;
              _ref1 = role_data.members || [];
              _results1 = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                user_id = _ref1[_i];
                _results1.push(emit([user_id, role_name, team_id]));
              }
              return _results1;
            })());
          }
          return _results;
        }
      }
    },
    lists: {
      get_teams: function(header, req) {
        var doc, out, row, team;
        out = [];
        while ((row = getRow())) {
          doc = row.doc;
          if (!validate._is_team(doc)) {
            continue;
          }
          team = h.add_team_perms(doc, req.userCtx);
          out.push(team);
        }
        return JSON.stringify(out);
      },
      get_team_roles: function(header, req) {
        var out, role, row, team;
        out = [];
        while ((row = getRow())) {
          team = row.doc;
          role = row.key[1];
          out.push({
            team: team,
            role: role
          });
        }
        return JSON.stringify(out);
      }
    },
    shows: {
      get_team: function(doc, req) {
        var team;
        team = h.add_team_perms(doc, req.userCtx);
        return {
          body: JSON.stringify(team),
          "headers": {
            "Content-Type": "application/json"
          }
        };
      }
    },
    validate_doc_update: actions.validate_doc_update,
    updates: {
      do_action: actions.do_action
    },
    rewrites: [
      {
        from: "/teams",
        to: "/_list/get_teams/_all_docs",
        method: 'GET',
        query: {
          include_docs: 'true'
        }
      }, {
        from: "/teams/:team_id",
        to: "/_show/get_team/:team_id",
        query: {}
      }
    ]
  };

  audit.mixin(dd);

  module.exports = dd;

}).call(this);

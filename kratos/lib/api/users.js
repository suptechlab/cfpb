// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Promise, conf, couch_utils, doAction, isInt, process_req, user_db, users, utils, uuid, validate, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  utils = require('../utils');

  couch_utils = require('../couch_utils');

  user_db = couch_utils.nano_system_user.use('_users');

  uuid = require('node-uuid');

  conf = require('../config');

  Promise = require('pantheon-helpers').promise;

  doAction = require('pantheon-helpers').doAction;

  validate = require('../validation');

  users = {};

  process_req = function(req) {
    var params, user_name;
    params = req.params;
    user_name = params.user_id;
    return [user_name, params];
  };

  isInt = function(s) {
    return String(parseInt(s)) === s;
  };

  users.get_users = function(opts, callback) {

    /*
    opts:
      all - return all users including deactivated users 
            (default: false - return only active users)
      names - return only those active users with the names specified in the list
    
    names will override all
     */
    var params, _ref;
    if (typeof opts === 'function' || opts === 'promise') {
      callback = opts;
    }
    opts || (opts = {});
    params = {
      include_docs: 'true'
    };
    if (opts.names) {
      params.keys = opts.names.map(function(name) {
        return [true, name];
      });
    } else if ((_ref = opts.all) !== 'true' && _ref !== true) {
      _.extend(params, {
        startkey: [true],
        endkey: [true, {}]
      });
    }
    return user_db.viewWithList('base', 'by_name', 'get_users', params, callback);
  };

  users.handle_get_users = function(req, resp) {
    var resource, rsrc, rsrc_id, _ref;
    resource = null;
    _ref = req.query;
    for (rsrc in _ref) {
      rsrc_id = _ref[rsrc];
      if (__indexOf.call(validate.auth.resources, rsrc) >= 0) {
        resource = rsrc;
        break;
      }
    }
    if (resource) {
      if (isInt(rsrc_id)) {
        rsrc_id = parseInt(rsrc_id);
      }
      return user_db.viewWithList('base', 'by_resource_id', 'get_user', {
        include_docs: true,
        key: [resource, rsrc_id]
      }).pipe(resp);
    } else {
      return users.get_users(req.query).pipe(resp);
    }
  };

  users.get_user = function(user_name, callback) {

    /* will return system user if callback or promise, but not if stream */
    var is_system_user, system_user, system_user_name, user_promise;
    system_user_name = conf.COUCHDB.SYSTEM_USER;
    system_user = {
      name: system_user_name,
      roles: []
    };
    is_system_user = conf.COUCHDB.SYSTEM_USER === user_name;
    if (is_system_user && _.isFunction(callback)) {
      return callback(null, system_user);
    } else if (is_system_user && callback === 'promise') {
      return user_promise = Promise.resolve(system_user);
    } else {
      return couch_utils.rewrite(user_db, 'base', '/users/org.couchdb.user:' + user_name, callback);
    }
  };

  users.handle_get_user = function(req, resp) {
    var params, user_name, _ref;
    _ref = process_req(req), user_name = _ref[0], params = _ref[1];
    return users.get_user(user_name).pipe(resp);
  };

  users.add_role = function(client, user_name, resource, role, callback) {
    var user_id;
    user_id = 'org.couchdb.user:' + user_name;
    return doAction(client.use('_users'), 'base', user_id, {
      a: 'r+',
      resource: resource,
      role: role
    }, callback);
  };

  users.remove_role = function(client, user_name, resource, role, callback) {
    var user_id;
    user_id = 'org.couchdb.user:' + user_name;
    return doAction(client.use('_users'), 'base', user_id, {
      a: 'r-',
      resource: resource,
      role: role
    }, callback);
  };

  users.handle_add_role = function(req, resp) {
    var params, user_name, _ref;
    _ref = process_req(req), user_name = _ref[0], params = _ref[1];
    return users.add_role(req.couch, user_name, params.resource, params.role).pipe(resp);
  };

  users.handle_remove_role = function(req, resp) {
    var params, user_name, _ref;
    _ref = process_req(req), user_name = _ref[0], params = _ref[1];
    return users.remove_role(req.couch, user_name, params.resource, params.role).pipe(resp);
  };

  users.add_data = function(client, user_name, path, data, callback) {
    var user_id;
    user_id = 'org.couchdb.user:' + user_name;
    return doAction(client.use('_users'), 'base', user_id, {
      a: 'd+',
      path: path,
      data: data
    }, callback);
  };

  users.handle_add_data = function(req, resp) {
    var data, params, path, path_string, user_name, _ref;
    _ref = process_req(req), user_name = _ref[0], params = _ref[1];
    path_string = params.path || '';
    path = _.compact(path_string.split('/'));
    data = req.body;
    if (_.isArray(data) || !_.isObject(data)) {
      return resp.status(400).end(JSON.stringify({
        'error': 'bad_request ',
        'msg': 'data must be an object - {}'
      }));
    }
    return users.add_data(req.couch, user_name, path, data).pipe(resp);
  };

  users.reactivate_user = function(client, user_name, callback) {
    var user_id;
    user_id = 'org.couchdb.user:' + user_name;
    return doAction(client.use('_users'), 'base', user_id, {
      a: 'u+'
    }, callback);
  };

  users.handle_reactivate_user = function(req, resp) {
    var params, user_name, _ref;
    _ref = process_req(req), user_name = _ref[0], params = _ref[1];
    return users.reactivate_user(req.couch, user_name).pipe(resp);
  };

  users.deactivate_user = function(client, user_name, callback) {
    var user_id;
    user_id = 'org.couchdb.user:' + user_name;
    return doAction(client.use('_users'), 'base', user_id, {
      a: 'u-'
    }, callback);
  };

  users.handle_deactivate_user = function(req, resp) {
    var params, user_name, _ref;
    _ref = process_req(req), user_name = _ref[0], params = _ref[1];
    return users.deactivate_user(req.couch, user_name).pipe(resp);
  };

  users.create_user = function(client, user_data, callback) {
    user_data.password = conf.COUCH_PWD;
    return doAction(client.use('_users'), 'base', null, {
      a: 'u+',
      record: user_data
    }, callback);
  };

  users.handle_create_user = function(req, resp) {

    /*
    body must be a hash ({}).
    body must include the following data:
    {
      data: {
        username: <str>,
        <optional additional data>...
      }
    }
    body may include the following data:
    {
      roles: <array>
      rsrcs: {
        <rsrc str>: <hash>
      }
    
    }
     */
    return users.create_user(req.couch, req.body).pipe(resp);
  };

  module.exports = users;

}).call(this);

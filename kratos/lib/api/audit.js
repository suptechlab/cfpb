// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Promise, audit, conf, couch_utils, orgs, _;

  couch_utils = require('../couch_utils');

  conf = require('../config');

  orgs = conf.ORGS;

  _ = require('underscore');

  Promise = require('pantheon-helpers').promise;

  audit = {};

  audit.getAudit = function(startDate, endDate) {
    var auditPromises, dbs, opts;
    opts = {
      path: '/audit',
      qs: {}
    };
    if ((startDate != null) && !isNaN(startDate)) {
      opts.qs.startkey = startDate;
    }
    if ((endDate != null) && !isNaN(endDate)) {
      opts.qs.endkey = endDate;
    }
    dbs = orgs.map(function(org) {
      return couch_utils.nano_system_user.use('org_' + org);
    });
    dbs.push(couch_utils.nano_system_user.use('_users'));
    auditPromises = dbs.map(function(db) {
      return couch_utils.rewrite(db, 'base', opts, 'promise');
    });
    return Promise.all(auditPromises).then(function(resps) {
      var entries;
      entries = _.flatten(resps, true);
      entries = _.sortBy(entries, function(entry) {
        return entry.entry.dt;
      });
      return Promise.resolve(entries);
    });
  };

  audit.handleGetAudit = function(req, resp) {
    var endDate, startDate;
    startDate = parseInt(req.query.start);
    endDate = parseInt(req.query.end);
    return audit.getAudit(startDate, endDate).then(function(entries) {
      return resp.send(JSON.stringify(entries));
    }, function(err) {
      return console.error('handle_get_audit', err);
    })(resp.status(500).send(JSON.stringify({
      error: 'internal error',
      msg: 'internal error'
    })));
  };

  module.exports = audit;

}).call(this);

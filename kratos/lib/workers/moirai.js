// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Promise, auth, conf, emptyResolve, getOrCreateAsset, getTeamAssetDetails, handleAddCluster, handleAddData, handleAddUser, handleRemoveCluster, handleRemoveUser, moirai, moiraiConf, querystring, slug, users, _;

  _ = require('underscore');

  users = require('../api/users');

  auth = require('../validation').auth;

  Promise = require('pantheon-helpers/lib/promise');

  conf = require('../config');

  slug = require('slug');

  moiraiConf = conf.RESOURCES.MOIRAI;

  querystring = require('querystring');

  moirai = {};

  moirai.moiraiClient = Promise.RestClient({
    url: moiraiConf.URL,
    auth: moiraiConf.ADMIN_CREDENTIALS,
    json: true
  });

  emptyResolve = function() {
    return Promise.resolve();
  };

  moirai.setClusterKeys = function(clusterId, keys) {
    var url;
    url = '/moirai/clusters/' + clusterId.replace('cluster_', '') + '/keys';
    return moirai.moiraiClient.put({
      url: url,
      json: keys,
      body_only: true
    });
  };

  moirai.getTeamKeys = function(team) {
    var adminNames, allMemberNames, memberNames, _ref, _ref1;
    adminNames = ((_ref = team.roles.admin) != null ? _ref.members : void 0) || [];
    memberNames = ((_ref1 = team.roles.member) != null ? _ref1.members : void 0) || [];
    allMemberNames = _.unique(adminNames.concat(memberNames));
    return users.get_users({
      names: allMemberNames
    }, 'promise').then(function(userList) {
      var keyList;
      keyList = userList.map(function(user) {
        return _.findWhere(user.data.publicKeys || [], {
          name: 'moirai'
        });
      });
      return Promise.resolve(_.compact(keyList).map(function(key) {
        return key.key;
      }));
    });
  };

  moirai.setTeamKeys = function(team) {
    return moirai.getTeamKeys(team).then(function(keys) {
      var clusterIds, clusters, promisesList, _ref;
      clusters = ((_ref = team.rsrcs.moirai) != null ? _ref.assets : void 0) || [];
      clusterIds = _.pluck(clusters, 'cluster_id');
      promisesList = clusterIds.map(function(clusterId) {
        return moirai.setClusterKeys(clusterId, keys);
      });
      return Promise.all(promisesList).then(emptyResolve);
    });
  };

  handleAddUser = function(event, team) {
    return moirai.setTeamKeys(team);
  };

  handleRemoveUser = function(event, team) {
    return moirai.setTeamKeys(team);
  };

  moirai.removeCluster = function(cluster_id) {
    var url;
    url = '/moirai/clusters/' + cluster_id.replace('cluster_', '');
    return moirai.moiraiClient.del(url);
  };

  handleRemoveCluster = function(event, team) {
    var cluster_id;
    cluster_id = event.asset.cluster_id;
    return moirai.removeCluster(cluster_id).then(emptyResolve);
  };

  handleAddCluster = function(event, team) {
    var cluster_id;
    cluster_id = event.asset.cluster_id;
    return moirai.getTeamKeys(team).then(function(keys) {
      return moirai.setClusterKeys(cluster_id, keys).then(emptyResolve);
    });
  };

  handleAddData = function(event, user) {
    var teams;
    if (event.data.publicKeys != null) {
      teams = require('../api/teams');
      return teams.get_all_team_roles_for_user(user.name).then(function(teamList) {
        var teamPromises;
        teamPromises = teamList.map(function(teamHash) {
          var team;
          team = teamHash.team;
          return moirai.setTeamKeys(team);
        });
        return Promise.all(teamPromises).then(function() {
          return Promise.resolve();
        });
      });
    } else {
      return Promise.resolve();
    }
  };

  getOrCreateAsset = function(assetData, team, actor) {
    var clusters, existingClusterWithName, moiraiData, url, _ref, _ref1;
    url = '/moirai/clusters';
    clusters = ((_ref = team.rsrcs.moirai) != null ? _ref.assets : void 0) || [];
    existingClusterWithName = _.findWhere(clusters, {
      name: assetData.name
    });
    if (existingClusterWithName != null) {
      return Promise.resolve();
    } else {
      moiraiData = {
        name: assetData["new"],
        instances: [
          {
            tags: {
              Name: slug('moirai-' + team.name + '-' + assetData["new"]),
              Application: assetData["new"],
              BusinessOwner: team.name,
              Creator: ((_ref1 = actor.data) != null ? _ref1.username : void 0) || actor.name
            }
          }
        ]
      };
      return moirai.moiraiClient.post({
        url: url,
        json: moiraiData,
        body_only: true
      }).then(function(newClusterData) {
        return Promise.resolve({
          cluster_id: newClusterData._id.slice(8),
          name: newClusterData.name
        });
      });
    }
  };

  getTeamAssetDetails = function(assets, team, actor) {
    var query, url;
    query = {
      clusterIds: _.pluck(assets, 'cluster_id')
    };
    url = '/moirai/clusters?' + querystring.stringify(query);
    return moirai.moiraiClient.get({
      url: url,
      body_only: true
    });
  };

  module.exports = {
    handlers: {
      team: {
        'u+': handleAddUser,
        'u-': handleRemoveUser,
        't+': null,
        't-': null,
        self: {
          'a+': handleAddCluster,
          'a-': handleRemoveCluster
        },
        other: {
          'a+': null,
          'a-': null
        }
      },
      user: {
        self: {
          'r+': null,
          'r-': null
        },
        other: {
          'r+': null,
          'r-': null
        },
        'u+': null,
        'u-': null,
        'd+': handleAddData
      }
    },
    getOrCreateAsset: getOrCreateAsset,
    getTeamAssetDetails: getTeamAssetDetails,
    testing: moirai
  };

}).call(this);

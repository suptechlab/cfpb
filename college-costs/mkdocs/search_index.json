{
    "docs": [
        {
            "location": "/", 
            "text": "Data specifications\n\n\nThis is specification documentation for the \ncollege-costs\n project.\n\n\nThe project takes in and displays information about the costs and benefits of enrolling in a collegiate program.\n\n\nThis documentation spells out how information to be used should be formatted and delivered.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#data-specifications", 
            "text": "This is specification documentation for the  college-costs  project.  The project takes in and displays information about the costs and benefits of enrolling in a collegiate program.  This documentation spells out how information to be used should be formatted and delivered.", 
            "title": "Data specifications"
        }, 
        {
            "location": "/csv-spec/", 
            "text": "CSV specifications for program data\n\n\nThe CSV should be UTF-8 encoded and must be delivered to the CFPB via sFTP.  \n\n\nColumn names and types for college program data\n\n\nThe eight boldface fields are required. Data submissions will be rejected if these fields are missing or blank, or if a program code contains illegal characters.\n\n\nA sample CSV in the correct format can be \ndownloaded here\n.\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\nnote\n\n\n\n\n\n\n\n\n\n\nipeds_unit_id\n\n\ninteger\n\n\nwill be used as the canonical 6-digit school ID\n\n\n\n\n\n\nprogram_code\n\n\nstring\n\n\nassumed unique within a school; \ncan't contain these characters: ; \n \n { } _\n\n\n\n\n\n\nprogram_name\n\n\nstring\n\n\n\n\n\n\n\n\nprogram_length\n\n\ninteger\n\n\nstandard number of months to complete program\n\n\n\n\n\n\nprogram_level\n\n\ninteger\n\n\n0 = Non-degree-granting\n 1 = Certificate\n 2 = Associate\n 3 = Bachelor's\n 4 = Graduate\n\n\n\n\n\n\nbooks_supplies\n\n\ninteger\n\n\nannual cost of books and supplies\n\n\n\n\n\n\ntotal_cost\n\n\ninteger\n\n\ntotal attendance cost for completing an entire program\n\n\n\n\n\n\ntuition_fees\n\n\ninteger\n\n\nannual cost of tuition and fees\n\n\n\n\n\n\naccreditor\n\n\nstring\n\n\n\n\n\n\n\n\naverage_time_to_complete\n\n\ninteger\n\n\nin months\n\n\n\n\n\n\ncampus_name\n\n\nstring\n\n\n\n\n\n\n\n\ncip_code\n\n\nstring\n\n\nused to look up related career/field\n\n\n\n\n\n\ncompleters\n\n\ninteger\n\n\nnumber in cohort who completed the program\n\n\n\n\n\n\ncompletion_rate\n\n\nfloat\n\n\n0.41 (would signify 41%)\n\n\n\n\n\n\ncompletion_cohort\n\n\ninteger\n\n\nnumber of students who enrolled in the program\n\n\n\n\n\n\ndefault_rate\n\n\nfloat\n\n\n0.25\n\n\n\n\n\n\njob_placement_rate\n\n\nfloat\n\n\n0.33\n\n\n\n\n\n\njob_placement_note\n\n\nstring\n\n\noptional note on job rate\n\n\n\n\n\n\nmean_student_loan_completers\n\n\ninteger\n\n\naverage of amounts grads owe\n\n\n\n\n\n\nmedian_salary\n\n\ninteger\n\n\n\n\n\n\n\n\nmedian_student_loan_completers\n\n\ninteger\n\n\nmedian of amounts grads owe\n\n\n\n\n\n\nope_id\n\n\nstring\n\n\nmax of 8 characters; alternate Dept. of Ed school ID as backup\n\n\n\n\n\n\nsoc_codes\n\n\nstring\n\n\npipe-separated list of related career/fields\n\n\n\n\n\n\n\n\nChange log\n\n\n\n\n\n\n\n\nChange\n\n\ndate\n\n\n\n\n\n\n\n\n\n\nAdded 8-character max for ope_id\n\n\n2017-03-27\n\n\n\n\n\n\nAdded note on sFTP delivery\n\n\n2017-01-09\n\n\n\n\n\n\nAdded boldface to required fields\n\n\n2016-10-21\n\n\n\n\n\n\nNoted ipeds_unit_id is an integer\n\n\n2016-08-24\n\n\n\n\n\n\nAdded underscore to list of characters not allowed in a program code\n\n\n2016-08-24\n\n\n\n\n\n\nAdded notes indicating that books_supplies and tutiion_fees should be annual values\n\n\n2016-07-26\n\n\n\n\n\n\nAdded 'completion_cohort' and 'completers' values\n\n\n2016-07-11\n\n\n\n\n\n\nAdded illegal character list for program codes\n\n\n2016-07-01\n\n\n\n\n\n\nAdded requirement for UTF-8 encoding\n\n\n2016-06-29\n\n\n\n\n\n\nRestored 'program_length' field, which was initially provided as 'monthsinprogram'\n\n\n2016-02-14\n\n\n\n\n\n\nAdded 0 as possible value for program_level, to match Ed. Dept. mappings\n\n\n2016-02-11\n\n\n\n\n\n\nChanged average_salary to median_salary\n\n\n2016-01-28\n\n\n\n\n\n\nJob_placement_note type changed to string\n\n\n2016-01-12\n\n\n\n\n\n\nNote added to program_level to specify values\n\n\n2016-01-12\n\n\n\n\n\n\nFixed typo in note on median_student_loan_completers: it represents median not mean\n\n\n2016-01-12", 
            "title": "CSV spec for program data"
        }, 
        {
            "location": "/csv-spec/#csv-specifications-for-program-data", 
            "text": "The CSV should be UTF-8 encoded and must be delivered to the CFPB via sFTP.", 
            "title": "CSV specifications for program data"
        }, 
        {
            "location": "/csv-spec/#column-names-and-types-for-college-program-data", 
            "text": "The eight boldface fields are required. Data submissions will be rejected if these fields are missing or blank, or if a program code contains illegal characters.  A sample CSV in the correct format can be  downloaded here .     name  type  note      ipeds_unit_id  integer  will be used as the canonical 6-digit school ID    program_code  string  assumed unique within a school;  can't contain these characters: ;     { } _    program_name  string     program_length  integer  standard number of months to complete program    program_level  integer  0 = Non-degree-granting  1 = Certificate  2 = Associate  3 = Bachelor's  4 = Graduate    books_supplies  integer  annual cost of books and supplies    total_cost  integer  total attendance cost for completing an entire program    tuition_fees  integer  annual cost of tuition and fees    accreditor  string     average_time_to_complete  integer  in months    campus_name  string     cip_code  string  used to look up related career/field    completers  integer  number in cohort who completed the program    completion_rate  float  0.41 (would signify 41%)    completion_cohort  integer  number of students who enrolled in the program    default_rate  float  0.25    job_placement_rate  float  0.33    job_placement_note  string  optional note on job rate    mean_student_loan_completers  integer  average of amounts grads owe    median_salary  integer     median_student_loan_completers  integer  median of amounts grads owe    ope_id  string  max of 8 characters; alternate Dept. of Ed school ID as backup    soc_codes  string  pipe-separated list of related career/fields", 
            "title": "Column names and types for college program data"
        }, 
        {
            "location": "/csv-spec/#change-log", 
            "text": "Change  date      Added 8-character max for ope_id  2017-03-27    Added note on sFTP delivery  2017-01-09    Added boldface to required fields  2016-10-21    Noted ipeds_unit_id is an integer  2016-08-24    Added underscore to list of characters not allowed in a program code  2016-08-24    Added notes indicating that books_supplies and tutiion_fees should be annual values  2016-07-26    Added 'completion_cohort' and 'completers' values  2016-07-11    Added illegal character list for program codes  2016-07-01    Added requirement for UTF-8 encoding  2016-06-29    Restored 'program_length' field, which was initially provided as 'monthsinprogram'  2016-02-14    Added 0 as possible value for program_level, to match Ed. Dept. mappings  2016-02-11    Changed average_salary to median_salary  2016-01-28    Job_placement_note type changed to string  2016-01-12    Note added to program_level to specify values  2016-01-12    Fixed typo in note on median_student_loan_completers: it represents median not mean  2016-01-12", 
            "title": "Change log"
        }, 
        {
            "location": "/offer-ids/", 
            "text": "Offer IDs\n\n\nOffer IDs allow a school to provide a disclosure of a student's enrollment offer without revealing who the student is. They also allow the CFPB to send a confirmation to the school after a disclosure is reviewed.\n\n\nOnly the school will know which student the offer ID applies to.\n\n\nTwo important details to note:  \n\n\n\n\nThe first seven characters in the offer ID should be given to the student so that she can confirm on the  disclosure page that the offer is hers.\n \n\n\nAn offer ID can be used only once.\n\nIf an offer ID generates a notification, either successful or with an error, it cannot be used again to validate an offer. If a student needs to re-evaluate an offer, a new offer ID needs to be generated and used in a new offer URL. \n\n\n\n\nTechnical details\n\n\nWe chose a 40-hex-character hash as the standard form for an offer ID because it has two advantages:  \n\n\n\n\nUnique hash values are easy to create in a way that cannot be traced back to a student.\n\n\nThe hashes contain only numbers and the letters a-f and are safe to transmit and accept.\n\n\n\n\nThe school is free decide how to generate the offer IDs, and we will allow up to 128 hex characters so other hashing algorithms can be used, but the IDs need to be unique. \n\nOne easy method would be to combine a timestamp and another value -- such as a student ID or a random number or phrase -- and generate a SHA-1 hash from the combined values.\n\n\nFollowing is an example Python function that does just that.\n\n\nimport hashlib\nimport datetime\n\n\ndef create_hash(value):\n    val = value + datetime.datetime.now().isoformat()\n    return hashlib.sha1(val).hexdigest()\n\n\n\n\nThis would return a unique offer ID that could be used as the 'oid' value in a student's offer URL.\n\nIf run again, even with the same input value, it would generate a new unique ID, because a new timestamp is used in creating each hash.\n\n\nThe school could then keep a record of the ID and the student it is for, and use it in the student's disclosure URL as spelled out in our \nURL specification\n.\n\n\nA helper script\n\n\nThe hashing function above is part of an offer-generating script that is \navailable for download\n. When run from a shell command line, the script can be used to create a single ID or a whole batch of IDs, and the result can be saved as a spreadsheet.\n\n\nThe command to use the script takes this form:\n\n\npython create_offer_ids.py \nVALUE\n [--number N] [--csv]\n\n\n\n\n\n\nVALUE is a word or phrase of your choice, used to increase randomness.\n\n\nThe \n--number\n option allows you to provide a number [N] of IDs you'd like to create.\n\n\nThe \n--csv\n option tells the script to create a spreadsheet containing the new IDs.\n\n\n\n\nExample usages:\n\n\npython create_offer_ids.py \ngo tigers\n\n\n\n\n\nThis will return a single unique offer ID, something like this:\n\n\n2df92217303700c6165d56a24b89cef419133a89\n\n\npython create_offer_ids.py \ngo tigers\n --number 2\n\n\n\n\nThis will return two unique offer IDs, such as\n\n\n4e259e04a2265b2d3d1114e3f66cb41a44f5be91\n\n\nee350cdc99747d7b85e3556ef1d99ef2b0d1f8b0\n\n\npython create_offer_ids.py \ngo tigers\n --number 200 --csv\n\n\n\n\nThe program will now return a message like this:\n\n\n200 offer IDs were output to 'student_offer_ids_2016-10-11.csv'\n\n\nThe CSV could be opened in a program such as Excel and used to assign IDs to prospective students.\n\n\nNotes:\n\n\n\n\nThe date tag in the CSV's name depends on the day the script is run.\n\n\nIf run with the \n--csv\n option multiple times on the same day, the new IDs will be appended to the first CSV created that day, if it hasn't been moved to a different directory.\n\n\nIf run on another day, a new CSV would be created with that day's date in the name.", 
            "title": "How to create offer ID hashes"
        }, 
        {
            "location": "/offer-ids/#offer-ids", 
            "text": "Offer IDs allow a school to provide a disclosure of a student's enrollment offer without revealing who the student is. They also allow the CFPB to send a confirmation to the school after a disclosure is reviewed.  Only the school will know which student the offer ID applies to.  Two important details to note:     The first seven characters in the offer ID should be given to the student so that she can confirm on the  disclosure page that the offer is hers.    An offer ID can be used only once. \nIf an offer ID generates a notification, either successful or with an error, it cannot be used again to validate an offer. If a student needs to re-evaluate an offer, a new offer ID needs to be generated and used in a new offer URL.", 
            "title": "Offer IDs"
        }, 
        {
            "location": "/offer-ids/#technical-details", 
            "text": "We chose a 40-hex-character hash as the standard form for an offer ID because it has two advantages:     Unique hash values are easy to create in a way that cannot be traced back to a student.  The hashes contain only numbers and the letters a-f and are safe to transmit and accept.   The school is free decide how to generate the offer IDs, and we will allow up to 128 hex characters so other hashing algorithms can be used, but the IDs need to be unique.  \nOne easy method would be to combine a timestamp and another value -- such as a student ID or a random number or phrase -- and generate a SHA-1 hash from the combined values.  Following is an example Python function that does just that.  import hashlib\nimport datetime\n\n\ndef create_hash(value):\n    val = value + datetime.datetime.now().isoformat()\n    return hashlib.sha1(val).hexdigest()  This would return a unique offer ID that could be used as the 'oid' value in a student's offer URL. \nIf run again, even with the same input value, it would generate a new unique ID, because a new timestamp is used in creating each hash.  The school could then keep a record of the ID and the student it is for, and use it in the student's disclosure URL as spelled out in our  URL specification .", 
            "title": "Technical details"
        }, 
        {
            "location": "/offer-ids/#a-helper-script", 
            "text": "The hashing function above is part of an offer-generating script that is  available for download . When run from a shell command line, the script can be used to create a single ID or a whole batch of IDs, and the result can be saved as a spreadsheet.  The command to use the script takes this form:  python create_offer_ids.py  VALUE  [--number N] [--csv]   VALUE is a word or phrase of your choice, used to increase randomness.  The  --number  option allows you to provide a number [N] of IDs you'd like to create.  The  --csv  option tells the script to create a spreadsheet containing the new IDs.   Example usages:  python create_offer_ids.py  go tigers   This will return a single unique offer ID, something like this:  2df92217303700c6165d56a24b89cef419133a89  python create_offer_ids.py  go tigers  --number 2  This will return two unique offer IDs, such as  4e259e04a2265b2d3d1114e3f66cb41a44f5be91  ee350cdc99747d7b85e3556ef1d99ef2b0d1f8b0  python create_offer_ids.py  go tigers  --number 200 --csv  The program will now return a message like this:  200 offer IDs were output to 'student_offer_ids_2016-10-11.csv'  The CSV could be opened in a program such as Excel and used to assign IDs to prospective students.  Notes:   The date tag in the CSV's name depends on the day the script is run.  If run with the  --csv  option multiple times on the same day, the new IDs will be appended to the first CSV created that day, if it hasn't been moved to a different directory.  If run on another day, a new CSV would be created with that day's date in the name.", 
            "title": "A helper script"
        }, 
        {
            "location": "/url-spec/", 
            "text": "URL specifications for offer data\n\n\nMapping url fields to data points\n\n\nValues should be annual unless otherwise specified.\n\nThe \ntotl\n field is a notable exception. It represents the sum of tuition, fees, books, and supplies for the entire length of a program. \n\n\nThis scheme results in URLs about 400 characters long, well below browser/server character limits.\n\nHere's what a full URL would look like (using fictional school, program and offer values):  \n\n\nhttps://www.consumerfinance.gov/paying-for-college2/\nunderstanding-your-financial-aid-offer/offer/?\niped=123456\npid=business-123\noid=a9e280139f3238cbc9702c7b0d62e5c238a835a0\n\nbook=650\ngib=3000\ngpl=1000\nhous=3000\ninsi=4.55\ninsl=3000\ninst=36\n\nleng=24\nmta=3000\nothg=100\nothr=500\nparl=10000\npelg=1500\nperl=3000\n\nppl=1000\nprvl=3000\nprvf=2.1\nprvi=4.55\nschg=2000\nstag=2000\n\nsubl=3500\ntotl=40000\ntran=500\ntuit=38976\nunsl=2000\nwkst=3000\n\n\n\n\nValue details\n\n\n\n\nThe following three values, in bold, are required. If they are missing, the tool will display an error.\n\n\nSchool ID (\niped\n) must be an integer.\n\n\nProgram ID (\npid\n) must not contain these characters: \n; \n \n { } _\n\n\nOffer ID (\noid\n) must contain only hex characters: a-f, 0-9\n\n\n\n\nThe values below are just examples to show type. \n\nRates can be more precise than two decimal places, but may be rounded for display.\n\nDollar amounts should be in rounded whole numbers.  \n\n\n\n\n\n\n\n\nIn URL\n\n\nDescription\n\n\nExample value\n\n\nNote\n\n\n\n\n\n\n\n\n\n\niped\n\n\ncollege ID\n\n\n123456\n\n\nRequired\n -- a 6-digit integer, the unit ID from IPEDS\n\n\n\n\n\n\npid\n\n\nprogram ID\n\n\nbusiness-981\n\n\nRequired\n -- a string; this would be combined with college ID to get a unique program\n\n\n\n\n\n\noid\n\n\noffer ID\n\n\n9e0280139f3238cbc970\n2c7b0d62e5c238a835d0\n\n\nRequired\n -- a 40-hex-character hashed value that represents one offer to one student. First 7 characters should be given to the student for matching with the disclosure page.\n\n\n\n\n\n\nbook\n\n\nbooks\n\n\n650\n\n\nbooks + supplies\n\n\n\n\n\n\ngib\n\n\ngi bill\n\n\n3000\n\n\n\n\n\n\n\n\ngpl\n\n\ngrad plus loans\n\n\n1000\n\n\n\n\n\n\n\n\nhous\n\n\nhousing\n\n\n3000\n\n\nroom + board\n\n\n\n\n\n\ninsi\n\n\ninstitutional (school) loan interest rate\n\n\n4.55\n\n\nrate should be expressed as percentage points\n\n\n\n\n\n\ninsl\n\n\ninstitutional loans (all)\n\n\n3000\n\n\nincluding tuition payment plans\n\n\n\n\n\n\ninst\n\n\ninstitutional loan term\n\n\n48\n\n\nin months\n\n\n\n\n\n\nleng\n\n\nprogram length\n\n\n48\n\n\noptional field for providing an adjusted program length, in months\n\n\n\n\n\n\nmta\n\n\nmilitary assistance\n\n\n3000\n\n\n\n\n\n\n\n\nothg\n\n\nother grants and scholarships\n\n\n100\n\n\n\n\n\n\n\n\nothr\n\n\nother costs\n\n\n500\n\n\n\n\n\n\n\n\nparl\n\n\nparent loans\n\n\n10000\n\n\nincludes all family contributions (except parent plus loans)\n\n\n\n\n\n\npelg\n\n\npell_grant\n\n\n1500\n\n\n\n\n\n\n\n\nperl\n\n\nperkins loans\n\n\n3000\n\n\n\n\n\n\n\n\nppl\n\n\nparent plus loans\n\n\n1000\n\n\n\n\n\n\n\n\nprvl\n\n\nprivate loans\n\n\n3000\n\n\n\n\n\n\n\n\nprvf\n\n\nprivate loan origination fee\n\n\n2.1\n\n\nexpressed as percentage points\n\n\n\n\n\n\nprvi\n\n\nprivate loan interest\n\n\n4.55\n\n\nexpressed as percentage points\n\n\n\n\n\n\nschg\n\n\nschool grants and scholarships\n\n\n2000\n\n\n\n\n\n\n\n\nstag\n\n\nstate grants\n\n\n2000\n\n\n\n\n\n\n\n\nsubl\n\n\nsubsidized loans\n\n\n3500\n\n\n\n\n\n\n\n\ntotl\n\n\ntotal direct cost\n\n\n40000\n\n\ntuition, fees, books, and supplies for the entire length of a program\n\n\n\n\n\n\ntran\n\n\ntransportation\n\n\n200\n\n\n\n\n\n\n\n\ntuit\n\n\ntuition\n\n\n18000\n\n\nannual tuition + fees\n\n\n\n\n\n\nunsl\n\n\nunsubsidized loans\n\n\n2000\n\n\n\n\n\n\n\n\nwkst\n\n\nwork study\n\n\n3000\n\n\n\n\n\n\n\n\n\n\nChange log\n\n\n\n\n\n\n\n\nChange\n\n\ndate\n\n\n\n\n\n\n\n\n\n\nNoted three fields are expressed as percentage points: \ninsi\n, \nprvf\n, and \nprvi\n\n\n2017-03-31\n\n\n\n\n\n\nChanged URL to https\n\n\n2017-02-10\n\n\n\n\n\n\nNoted three required fields\n\n\n2016-11-19\n\n\n\n\n\n\nAdded \nleng\n field for optionally adjusting program length\n\n\n2016-11-17\n\n\n\n\n\n\nAdded underscore to list of characters not allowed in a program ID\n\n\n2016-08-24\n\n\n\n\n\n\nAdded note that values should be annual unless otherwise specified\n\n\n2016-07-26\n\n\n\n\n\n\nAdded note for parl: it represents all family contributions\n\n\n2016-07-19\n\n\n\n\n\n\nAdded notes on expressing rates and fees\n\n\n2016-07-15\n\n\n\n\n\n\nAdded \ntotl\n field\n\n\n2016-06-22\n\n\n\n\n\n\nAdded \nprvf\n and \ninst\n fields\n\n\n2016-05-27\n\n\n\n\n\n\nRemoved the \nfam\n and \nta\n fields\n\n\n2015-01-12", 
            "title": "URL spec for offer data"
        }, 
        {
            "location": "/url-spec/#url-specifications-for-offer-data", 
            "text": "", 
            "title": "URL specifications for offer data"
        }, 
        {
            "location": "/url-spec/#mapping-url-fields-to-data-points", 
            "text": "Values should be annual unless otherwise specified. \nThe  totl  field is a notable exception. It represents the sum of tuition, fees, books, and supplies for the entire length of a program.   This scheme results in URLs about 400 characters long, well below browser/server character limits. \nHere's what a full URL would look like (using fictional school, program and offer values):    https://www.consumerfinance.gov/paying-for-college2/\nunderstanding-your-financial-aid-offer/offer/?\niped=123456 pid=business-123 oid=a9e280139f3238cbc9702c7b0d62e5c238a835a0 book=650 gib=3000 gpl=1000 hous=3000 insi=4.55 insl=3000 inst=36 leng=24 mta=3000 othg=100 othr=500 parl=10000 pelg=1500 perl=3000 ppl=1000 prvl=3000 prvf=2.1 prvi=4.55 schg=2000 stag=2000 subl=3500 totl=40000 tran=500 tuit=38976 unsl=2000 wkst=3000", 
            "title": "Mapping url fields to data points"
        }, 
        {
            "location": "/url-spec/#value-details", 
            "text": "The following three values, in bold, are required. If they are missing, the tool will display an error.  School ID ( iped ) must be an integer.  Program ID ( pid ) must not contain these characters:  ;     { } _  Offer ID ( oid ) must contain only hex characters: a-f, 0-9   The values below are just examples to show type.  \nRates can be more precise than two decimal places, but may be rounded for display. \nDollar amounts should be in rounded whole numbers.       In URL  Description  Example value  Note      iped  college ID  123456  Required  -- a 6-digit integer, the unit ID from IPEDS    pid  program ID  business-981  Required  -- a string; this would be combined with college ID to get a unique program    oid  offer ID  9e0280139f3238cbc970 2c7b0d62e5c238a835d0  Required  -- a 40-hex-character hashed value that represents one offer to one student. First 7 characters should be given to the student for matching with the disclosure page.    book  books  650  books + supplies    gib  gi bill  3000     gpl  grad plus loans  1000     hous  housing  3000  room + board    insi  institutional (school) loan interest rate  4.55  rate should be expressed as percentage points    insl  institutional loans (all)  3000  including tuition payment plans    inst  institutional loan term  48  in months    leng  program length  48  optional field for providing an adjusted program length, in months    mta  military assistance  3000     othg  other grants and scholarships  100     othr  other costs  500     parl  parent loans  10000  includes all family contributions (except parent plus loans)    pelg  pell_grant  1500     perl  perkins loans  3000     ppl  parent plus loans  1000     prvl  private loans  3000     prvf  private loan origination fee  2.1  expressed as percentage points    prvi  private loan interest  4.55  expressed as percentage points    schg  school grants and scholarships  2000     stag  state grants  2000     subl  subsidized loans  3500     totl  total direct cost  40000  tuition, fees, books, and supplies for the entire length of a program    tran  transportation  200     tuit  tuition  18000  annual tuition + fees    unsl  unsubsidized loans  2000     wkst  work study  3000", 
            "title": "Value details"
        }, 
        {
            "location": "/url-spec/#change-log", 
            "text": "Change  date      Noted three fields are expressed as percentage points:  insi ,  prvf , and  prvi  2017-03-31    Changed URL to https  2017-02-10    Noted three required fields  2016-11-19    Added  leng  field for optionally adjusting program length  2016-11-17    Added underscore to list of characters not allowed in a program ID  2016-08-24    Added note that values should be annual unless otherwise specified  2016-07-26    Added note for parl: it represents all family contributions  2016-07-19    Added notes on expressing rates and fees  2016-07-15    Added  totl  field  2016-06-22    Added  prvf  and  inst  fields  2016-05-27    Removed the  fam  and  ta  fields  2015-01-12", 
            "title": "Change log"
        }, 
        {
            "location": "/notification-spec/", 
            "text": "Notifications\n\n\nSchool that need to receive notifications of completed disclosures have two ways to be notified.\n\nThe first, and preferred, method is via an API endpoint that the school will maintain.\n\nThe endpoint must be able to receive POST requests with a payload in this form:\n\n\noid: f38283b5b7c939a058889f997949efa566c616c5  \ntime: 2016-01-13T16:04:37.777104+00:00  \nerrors: none\n\n\n\n\nFeilds\n\n\noid\n is a 40-character hex string from the offer url to allow the school to match an offer to a student.\n\n\ntime\n is a UTC timestamp string representing when the disclosure notification was generated.\n\n\nerrors\n is a string indicating whether the disclosure was valid. It will have one of two values:  \n\n\n\n\n\n\n\"none\"\n\n  This will confirm that the disclosure was completed and is valid.\n\n\n\n\n\n\n\"INVALID: student indicated the offer information is wrong\"\n\n  This indicates that the student clicked on the link labeled \"No, this is not my information\"\n\n  This option is intended to catch cases where the student was given the wrong URL or a faulty URL.\n\n  In this case, a new \noid\n will need to be generated in order to complete a valid disclosure; \noid\n values are allowed to generate only one notification.\n\n\n\n\n\n\nSchools may use \noid\n values of up to 128 hex characters.\n\n\nEmail notification option\n\n\nEndpoint notifications are preferred because they are more reliable and simpler to automate.\n\nSchools that can't set up endpoints can get notifications via email.\n\n\nNotification failures\n\n\nIf a technological problem prevents notifications from being transmitted to the school for more than a day, an email will be sent to the school's contacts with details about the unsent notifications and any attempts to transmit them. The email serves two purposes \u2013 to assist in troubleshooting, and to clarify the status of any unsent notifications while the issue is being resolved.", 
            "title": "Notification spec validating offers"
        }, 
        {
            "location": "/notification-spec/#notifications", 
            "text": "School that need to receive notifications of completed disclosures have two ways to be notified. \nThe first, and preferred, method is via an API endpoint that the school will maintain. \nThe endpoint must be able to receive POST requests with a payload in this form:  oid: f38283b5b7c939a058889f997949efa566c616c5  \ntime: 2016-01-13T16:04:37.777104+00:00  \nerrors: none", 
            "title": "Notifications"
        }, 
        {
            "location": "/notification-spec/#feilds", 
            "text": "oid  is a 40-character hex string from the offer url to allow the school to match an offer to a student.  time  is a UTC timestamp string representing when the disclosure notification was generated.  errors  is a string indicating whether the disclosure was valid. It will have one of two values:      \"none\" \n  This will confirm that the disclosure was completed and is valid.    \"INVALID: student indicated the offer information is wrong\" \n  This indicates that the student clicked on the link labeled \"No, this is not my information\" \n  This option is intended to catch cases where the student was given the wrong URL or a faulty URL. \n  In this case, a new  oid  will need to be generated in order to complete a valid disclosure;  oid  values are allowed to generate only one notification.    Schools may use  oid  values of up to 128 hex characters.", 
            "title": "Feilds"
        }, 
        {
            "location": "/notification-spec/#email-notification-option", 
            "text": "Endpoint notifications are preferred because they are more reliable and simpler to automate. \nSchools that can't set up endpoints can get notifications via email.", 
            "title": "Email notification option"
        }, 
        {
            "location": "/notification-spec/#notification-failures", 
            "text": "If a technological problem prevents notifications from being transmitted to the school for more than a day, an email will be sent to the school's contacts with details about the unsent notifications and any attempts to transmit them. The email serves two purposes \u2013 to assist in troubleshooting, and to clarify the status of any unsent notifications while the issue is being resolved.", 
            "title": "Notification failures"
        }
    ]
}
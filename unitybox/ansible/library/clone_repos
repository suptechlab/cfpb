#!/usr/bin/python
DOCUMENTATION = '''
---
module: clone_repos
author: Daniel Davis
version_added: n/a
short_description: Clones or updates a list of repos in parallel
requirements: []
description: 
  - This module will attempt to clone a new repo if it doesn't exist or update the repo from its origin if it doesn't exist
  - The decision to clone or update is based on the presence of the .git/config file in the target folder
options: 
  urls: 
    required: true
    description: 
      - a list of the urls of repos you want to clone
  processes: 
    required: false
    default: 10
    description:
      - The maximum size of the process pool (i.e. maximum number of workers)
  install_dir: 
    required: true
    description:
      - the location where all the repos will be cloned.  Each repo will
      be cloned into a directory matching the repo name.  
  ensure_pinned: 
  	required: false
  	description: 
  	  - When true will clone the repo at a specific version.  When false
  	  will ignore any version information for repos.  
'''

EXAMPLES = '''
# Clone both the Spoon-Knife and the hellogitworld repos
- clone_repos: 
    urls: 
      - https://github.com/octocat/Spoon-Knife.git@d0dd1f61b33d64e29d8bc1372a94ef6a2fee76a9
      - https://github.com/githubtraining/hellogitworld.git@RELEASE_1.1
    processes: 5
    install_dir: /path/to/directory
    ensure_pinned: True
'''

import os
from multiprocessing import Pool
import re

# e.g. https://github.com/some-user/repo-name.git@61030e628fa5d6ea49ee9bb70638d5f7125a7f82
git_re = re.compile(r'^(?P<url>https://(?P<host>[^/]+)/(?P<owner>[^/]+)/(?P<repo>[^\@]+?)(?:\.git)?)(?:\@(?P<revision>.*))?$')


def _gh_part(url, part_name):
    match = git_re.match(url)
    if not match:
        raise Exception('Not a valid git URL: {0}'.format(url))
    try:
        return match.group(part_name)
    except TypeError:
        raise Exception('No {0} in git URL: {1}'.format(part_name, url))


def run_command_with_exceptions(module, cmd, *args, **kwargs):
	# if we use check_rc inside a subprocess the failure
	# will not get bubbled up to the main process and will
	# hang
	kwargs['check_rc'] = False
	rc, stdout, stderr = module.run_command(cmd, *args, **kwargs)
	if rc != 0:
		raise Exception("`{0}` exited with error code {1}: {2}".format(cmd, rc, stderr))
	return rc, stdout, stderr

def clone_repo(module, url, dest, tag):
	dest_dirname = os.path.dirname(dest)
	try:
		os.makedirs(dest_dirname)
	except:
		pass

	cmd = 'git clone --depth 1 {1} {2}'.format(tag, url, dest)
	return run_command_with_exceptions(module, cmd, cwd=dest_dirname)

def has_local_mods(module, dest):
    cmd = "git status -s"
    rc, stdout, stderr = run_command_with_exceptions(module, cmd, cwd=dest)
    lines = stdout.splitlines()
    lines = filter(lambda c: not re.search('^\\?\\?.*$', c), lines)

    return len(lines) > 0

def reset(module, dest):
    '''
    Resets the index and working tree to HEAD.
    Discards any changes to tracked files in working
    tree since that commit.
    '''
    cmd = "git reset --hard HEAD"
    return run_command_with_exceptions(module, cmd, cwd=dest)

def get_version(module, dest, ref="HEAD"):
    ''' samples the version of the git repo '''

    cmd = "git rev-parse %s" % (ref)
    rc, stdout, stderr = run_command_with_exceptions(module, cmd, cwd=dest)
    sha = stdout.rstrip('\n')
    return sha

def update_repo(module, url, dest, tag):
	cmd = "git remote set-url origin {0}".format(url)
	run_command_with_exceptions(module, cmd, cwd=dest)
	
	cmd = "git fetch origin master --tags"
	run_command_with_exceptions(module, cmd, cwd=dest)

	cmd = "git checkout {0} --force".format(tag)
	return run_command_with_exceptions(module, cmd, cwd=dest)

def clone_or_update_repo(module, url, dest, tag):
	dest = os.path.abspath(os.path.expanduser(dest))
	gitconfig = os.path.join(dest, '.git', 'config')
	if not os.path.exists(gitconfig):
		old_version = "n/a"
		result = clone_repo(module, url, dest, tag)
	else:
		if has_local_mods(module, dest):
			reset(module, dest)
		old_version = get_version(module, dest)

	result = update_repo(module, url, dest, tag)
		
	new_version = get_version(module, dest)
	result += (old_version, new_version)
	return result

def get_results(workers):
	results = []
	for worker in workers:
		result = worker.get()
		results.append({
			"rc": result[0],
			"stdout": result[1],
			"stderr": result[2],
			"changed": result[3] != result[4],
			})
	changed = any([result['changed'] for result in results])
	return {"results": results, "cloned_repo_status": changed}


def main():
	module = AnsibleModule(
    	argument_spec = dict(
			urls=dict(required=True),
			processes=dict(default=10, type='int'),
			install_dir=dict(required=True),
			ensure_pinned=dict(default=True)
    	)
	)		

	pool = Pool(processes=module.params['processes'])
	workers = []
	for url in module.params['urls']:
		repo_name = _gh_part(url, 'repo')
		dest = "{0}/{1}".format(module.params['install_dir'], repo_name)
		repo_url = _gh_part(url, 'url')
		tag = _gh_part(url, 'revision') if module.params['ensure_pinned'] else "master"
		workers.append(pool.apply_async(clone_or_update_repo, (module, repo_url, dest, tag)))

	pool.close()  # don't accept any more new workers
	pool.join()

	results = get_results(workers)
	
	module.exit_json(rc=0, **results)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()

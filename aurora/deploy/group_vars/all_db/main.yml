# main.yml - Default variables for upgrade scripts
---

backup_metadata_scripts:
  -
    "CREATE TABLE IF NOT EXISTS public.pg_dist_partition AS SELECT * FROM pg_catalog.pg_dist_partition;"
  -
    "CREATE TABLE IF NOT EXISTS public.pg_dist_shard AS SELECT * FROM pg_catalog.pg_dist_shard;"
  -
    "CREATE TABLE IF NOT EXISTS public.pg_dist_placement AS SELECT * FROM pg_catalog.pg_dist_placement;"
  -
    "CREATE TABLE IF NOT EXISTS public.pg_dist_node AS SELECT * FROM pg_catalog.pg_dist_node;"
  -
    "CREATE TABLE IF NOT EXISTS public.pg_dist_local_group AS SELECT * FROM pg_catalog.pg_dist_local_group;"
  -
    "CREATE TABLE IF NOT EXISTS public.pg_dist_transaction AS SELECT * FROM pg_catalog.pg_dist_transaction;"
  -
    "CREATE TABLE IF NOT EXISTS public.pg_dist_colocation AS SELECT * FROM pg_catalog.pg_dist_colocation;"

restore_metadata_scripts:
  -
    "INSERT INTO pg_catalog.pg_dist_partition SELECT * FROM public.pg_dist_partition;"
  -
    "INSERT INTO pg_catalog.pg_dist_shard SELECT * FROM public.pg_dist_shard;"
  -
    "INSERT INTO pg_catalog.pg_dist_placement SELECT * FROM public.pg_dist_placement;"
  -
    "INSERT INTO pg_catalog.pg_dist_node SELECT * FROM public.pg_dist_node;"
  -
    "TRUNCATE TABLE pg_catalog.pg_dist_local_group;"
  -
    "INSERT INTO pg_catalog.pg_dist_local_group SELECT * FROM public.pg_dist_local_group;"
  -
    "INSERT INTO pg_catalog.pg_dist_transaction SELECT * FROM public.pg_dist_transaction;"
  -
    "INSERT INTO pg_catalog.pg_dist_colocation SELECT * FROM public.pg_dist_colocation;"

drop_temp_scripts:
  -
    "DROP TABLE public.pg_dist_partition;"
  -
    "DROP TABLE public.pg_dist_shard;"
  -
    "DROP TABLE public.pg_dist_placement;"
  -
    "DROP TABLE public.pg_dist_node;"
  -
    "DROP TABLE public.pg_dist_local_group;"
  -
    "DROP TABLE public.pg_dist_transaction;"
  -
    "DROP TABLE public.pg_dist_colocation;"

restart_sequence_scripts:
  -
    "SELECT setval('pg_catalog.pg_dist_shardid_seq', (SELECT MAX(shardid)+1 AS max_shard_id FROM pg_dist_shard), false);"
  -
    "SELECT setval('pg_catalog.pg_dist_groupid_seq', (SELECT MAX(groupid)+1 AS max_group_id FROM pg_dist_node), false);"
  -
    "SELECT setval('pg_catalog.pg_dist_node_nodeid_seq', (SELECT MAX(nodeid)+1 AS max_node_id FROM pg_dist_node), false);"
  -
    "SELECT setval('pg_catalog.pg_dist_placement_placementid_seq', (SELECT MAX(placementid)+1 AS max_placement_id FROM pg_dist_placement), false);"
  -
    "SELECT setval('pg_catalog.pg_dist_colocationid_seq', (SELECT MAX(colocationid)+1 AS max_colocation_id FROM pg_dist_colocation), false);"

create_trigger_script:
  script: >
    CREATE OR REPLACE FUNCTION create_truncate_trigger(table_name regclass)
    RETURNS void
    as
    $$
    DECLARE
    command text;
    trigger_name text;
    BEGIN
    trigger_name := 'truncate_trigger_' || table_name::oid;
    command := 'create trigger ' || trigger_name || ' after truncate on ' || table_name || ' execute procedure pg_catalog.citus_truncate_trigger()';
    execute command;
    command := 'update pg_trigger set tgisinternal = true where tgname = ' || quote_literal(trigger_name);
    execute command;
    END;
    $$
    LANGUAGE plpgsql;

register_trigger_scripts:
  -
    "SELECT create_truncate_trigger(logicalrelid) FROM pg_dist_partition ;"
  -
    "DROP FUNCTION create_truncate_trigger(regclass);"

set_dependency_scripts:
  script: >
    INSERT INTO pg_depend
    SELECT
    'pg_class'::regclass::oid as classid,
    p.logicalrelid::regclass::oid as objid,
    0 as objsubid,
    'pg_extension'::regclass::oid as refclassid,
    (select oid from pg_extension where extname = 'citus') as refobjid,
    0 as refobjsubid ,
    'n' as deptype
    FROM
    pg_dist_partition p;

apiVersion: "sparkoperator.k8s.io/v1beta1"
kind: SparkApplication
metadata:
  name: hmda-spark-disclosure
  namespace: default
spec:
  type: Scala
  mode: cluster
  image: "hmda/hmda-spark-reporting:newk8"
  imagePullPolicy: Always
  mainClass: com.hmda.reports.DisclosureReports
  mainApplicationFile: "local:///opt/spark/cfpb/hmda/jars/hmda-spark-reporting.jar"
  sparkVersion: "2.4.5"
  restartPolicy:
    type: Never
#  volumes:
#    - name: "test-volume"
#      hostPath:
#        path: "/tmp"
#        type: Directory
  driver:
    cores: 2
    coreLimit: "4000m"
    memory: "2g"
    labels:
      version: 2.4.0
#    affinity:
#      podAffinity:
#        requiredDuringSchedulingIgnoredDuringExecution:
#        - labelSelector:
#            matchExpressions:
#            - key: app
#              operator: In
#              values:
#              - "hmda-platform"
#              - "keycloak"
#          topologyKey: kubernetes.io/hostname
    serviceAccount: spark-operator-spark
    configMaps:
      - name: kafka-configmap
        path: /mnt/kafka-config-maps
    envSecretKeyRefs:
      JDBC_URL:
        name: inst-postgres-credentials
        key: url
      ACCESS_KEY:
        name: aws-credentials
        key: aws-access-key-id
      SECRET_KEY:
        name: aws-credentials
        key: aws-secret-access-key
      KAFKA_HOSTS:
        name: kafka-hosts
        key: kafka-hosts
      AWS_ENV:
        name: aws-env
        key: aws-env
#    volumeMounts:
#      - name: "test-volume"
#        mountPath: "/tmp"
  executor:
    cores: 2
    instances: 1
    memory: "2g"
    labels:
      version: 2.4.0
#    affinity:
#      podAntiAffinity:
#        requiredDuringSchedulingIgnoredDuringExecution:
#        - labelSelector:
#            matchExpressions:
#            - key: app
#              operator: In
#              values:
#              - "hmda-platform"
#              - "keycloak"
#          topologyKey: kubernetes.io/hostname
    configMaps:
      - name: kafka-configmap
        path: /mnt/kafka-config-maps
    envSecretKeyRefs:
      JDBC_URL:
        name: inst-postgres-credentials
        key: url
      ACCESS_KEY:
        name: aws-credentials
        key: aws-access-key-id
      SECRET_KEY:
        name: aws-credentials
        key: aws-secret-access-key
      AWS_ENV:
        name: aws-env
        key: aws-env
      KAFKA_HOSTS:
        name: kafka-hosts
        key: kafka-hosts
#    volumeMounts:
#      - name: "test-volume"
#        mountPath: "/tmp"
#    volumes:
#      - name: config-vol
#        configMap:
#          name: dummy-cm